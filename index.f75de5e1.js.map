{"mappings":"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","sources":["src/scripts/main.js"],"sourcesContent":["'use strict';\n\nconst cells = [...document.querySelectorAll('.field-cell')];\nconst startButton = document.querySelector('.button.start');\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst messages = document.querySelectorAll('.message');\nconst messageLose = document.querySelector('.message.message-lose');\nconst messageWin = document.querySelector('.message.message-win');\n\nconst BOARD_SIZE = 4;\nlet score = 0;\nconst board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nstartButton.addEventListener('click', startGame);\n\nlet keyTimer;\n\ndocument.addEventListener('keydown', (event) => {\n  clearTimeout(keyTimer);\n\n  keyTimer = setTimeout(() => {\n    handleKeyPress(event);\n  }, 100);\n});\n\nfunction addRandomTile() {\n  if (!hasEmptyCells() && !canMerged()) {\n    messageLose.classList.remove('hidden');\n\n    return;\n  }\n\n  const emptyCells = [];\n\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      if (board[i][j] === 0) {\n        emptyCells.push({\n          x: i,\n          y: j,\n        });\n      }\n    }\n  }\n\n  const randomNumber = Math.random() < 0.9 ? 2 : 4;\n\n  if (emptyCells.length) {\n    const randomCell\n      = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    board[randomCell.x][randomCell.y] = randomNumber;\n  }\n}\n\nfunction updateBoard() {\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      const cell = gameField.rows[row].cells[col];\n\n      cell.className = `field-cell field-cell--${board[row][col]}`;\n      cell.textContent = board[row][col] || '';\n    }\n  }\n}\n\nfunction startGame() {\n  if (startButton.classList.contains('start')) {\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart'; ;\n  }\n\n  [...messages].forEach(message => message.classList.add('hidden'));\n\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      board[i][j] = 0;\n    }\n  }\n\n  [...cells].forEach(cell => {\n    cell.className = 'field-cell';\n    cell.textContent = '';\n  });\n\n  score = 0;\n  gameScore.textContent = score;\n\n  addRandomTile();\n  addRandomTile();\n\n  updateBoard();\n}\n\nfunction isWinner() {\n  return cells.some(cell => cell.classList.contains(`field-cell--${2048}`));\n}\n\nfunction handleKeyPress(event) {\n  if (isWinner()) {\n    messageWin.classList.remove('hidden');\n\n    return;\n  }\n\n  if (!hasEmptyCells() && !canMerged()) {\n    messageLose.classList.remove('hidden');\n\n    return;\n  }\n\n  switch (event.key) {\n    case 'ArrowUp':\n    case 'ArrowDown':\n      moveVertical(event.key);\n      break;\n\n    case 'ArrowLeft':\n    case 'ArrowRight':\n      moveHorizontal(event.key);\n      break;\n\n    default:\n  }\n}\n\nfunction moveVertical(direction) {\n  let isColumnChanged = false;\n\n  for (let col = 0; col < BOARD_SIZE; col++) {\n    let currentColumn = [\n      board[0][col],\n      board[1][col],\n      board[2][col],\n      board[3][col],\n    ];\n\n    const columnCopy = [...currentColumn];\n\n    if (direction === 'ArrowDown') {\n      currentColumn.reverse();\n    }\n\n    currentColumn = slideTiles(currentColumn);\n\n    if (direction === 'ArrowDown') {\n      currentColumn.reverse();\n    }\n\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      board[i][col] = currentColumn[i];\n    }\n\n    if (hasBoardChanged(columnCopy, currentColumn)) {\n      isColumnChanged = true;\n    }\n  }\n\n  if (isColumnChanged) {\n    addRandomTile();\n    updateBoard();\n  }\n}\n\nfunction moveHorizontal(direction) {\n  let isRowChanged = false;\n\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const rowCopy = [...board[row]];\n    let currentRow = board[row];\n\n    if (direction === 'ArrowRight') {\n      currentRow.reverse();\n    }\n\n    currentRow = slideTiles(currentRow);\n\n    if (direction === 'ArrowRight') {\n      currentRow.reverse();\n    }\n\n    board[row] = currentRow;\n\n    if (hasBoardChanged(rowCopy, currentRow)) {\n      isRowChanged = true;\n    }\n  }\n\n  if (isRowChanged) {\n    addRandomTile();\n    updateBoard();\n  }\n}\n\nfunction slideTiles(row) {\n  let filteredRow = removeZeroes(row);\n\n  for (let i = 0; i < filteredRow.length - 1; i++) {\n    if (filteredRow[i] === filteredRow[i + 1]) {\n      filteredRow[i] *= 2;\n      filteredRow[i + 1] = 0;\n\n      score += filteredRow[i];\n    }\n  }\n\n  filteredRow = removeZeroes(filteredRow);\n\n  while (filteredRow.length < BOARD_SIZE) {\n    filteredRow.push(0);\n  }\n\n  return filteredRow;\n}\n\nfunction removeZeroes(row) {\n  return row.filter(number => number !== 0);\n}\n\nfunction canMerged() {\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      if (col < BOARD_SIZE - 1 && board[row][col] === board[row][col + 1]) {\n        return true;\n      }\n\n      if (row < BOARD_SIZE - 1 && board[row][col] === board[row + 1][col]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction hasEmptyCells() {\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      if (board[row][col] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction hasBoardChanged(arr1, arr2) {\n  return JSON.stringify(arr1) !== JSON.stringify(arr2);\n}\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}