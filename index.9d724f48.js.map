{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,E,I,A,W,M,A,U,wI,G,CCEA,IAmBI,EAnBE,EAAS,EAAG,SAAS,gBAAgB,CAAC,gBACtC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAW,SAAS,gBAAgB,CAAC,YACrC,EAAc,SAAS,aAAa,CAAC,yBACrC,EAAa,SAAS,aAAa,CAAC,wBAGtC,EAAQ,EACN,EAAQ,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAcD,SAAS,IACP,GAAI,CAAC,KAAmB,CAAC,IAAa,CACpC,EAAY,SAAS,CAAC,MAAM,CAAC,UAE7B,MACF,CAIA,IAAK,IAFC,EAAa,EAAE,CAEZ,EAAI,EAAG,EA9BC,EA8Be,IAC9B,IAAK,IAAI,EAAI,EAAG,EA/BD,EA+BiB,IACV,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,EACb,EAAW,IAAI,CAAC,CACd,EAAG,EACH,EAAG,CACL,GAON,GAAI,EAAW,MAAM,CAAE,CACrB,IAAM,EACF,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,AAE7D,CAAA,CAAK,CAAC,EAAW,CAAC,CAAC,CAAC,EAAW,CAAC,CAAC,CANd,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CAO/C,CACF,CAEA,SAAS,IACP,IAAK,IAAI,EAAM,EAAG,EApDD,EAoDmB,IAC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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar cells = _to_consumable_array(document.querySelectorAll(\".field-cell\"));\nvar startButton = document.querySelector(\".button.start\");\nvar gameField = document.querySelector(\".game-field\");\nvar gameScore = document.querySelector(\".game-score\");\nvar messages = document.querySelectorAll(\".message\");\nvar messageLose = document.querySelector(\".message.message-lose\");\nvar messageWin = document.querySelector(\".message.message-win\");\nvar BOARD_SIZE = 4;\nvar score = 0;\nvar board = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nstartButton.addEventListener(\"click\", startGame);\nvar keyTimer;\ndocument.addEventListener(\"keydown\", function(event) {\n    clearTimeout(keyTimer);\n    keyTimer = setTimeout(function() {\n        handleKeyPress(event);\n    }, 100);\n});\nfunction addRandomTile() {\n    if (!hasEmptyCells() && !canMerged()) {\n        messageLose.classList.remove(\"hidden\");\n        return;\n    }\n    var emptyCells = [];\n    for(var i = 0; i < BOARD_SIZE; i++){\n        for(var j = 0; j < BOARD_SIZE; j++)if (board[i][j] === 0) emptyCells.push({\n            x: i,\n            y: j\n        });\n    }\n    var randomNumber = Math.random() < 0.9 ? 2 : 4;\n    if (emptyCells.length) {\n        var randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        board[randomCell.x][randomCell.y] = randomNumber;\n    }\n}\nfunction updateBoard() {\n    for(var row = 0; row < BOARD_SIZE; row++)for(var col = 0; col < BOARD_SIZE; col++){\n        var cell = gameField.rows[row].cells[col];\n        cell.className = \"field-cell field-cell--\".concat(board[row][col]);\n        cell.textContent = board[row][col] || \"\";\n    }\n}\nfunction startGame() {\n    if (startButton.classList.contains(\"start\")) {\n        startButton.classList.remove(\"start\");\n        startButton.classList.add(\"restart\");\n        startButton.textContent = \"Restart\";\n    }\n    _to_consumable_array(messages).forEach(function(message) {\n        return message.classList.add(\"hidden\");\n    });\n    for(var i = 0; i < BOARD_SIZE; i++)for(var j = 0; j < BOARD_SIZE; j++)board[i][j] = 0;\n    _to_consumable_array(cells).forEach(function(cell) {\n        cell.className = \"field-cell\";\n        cell.textContent = \"\";\n    });\n    score = 0;\n    gameScore.textContent = score;\n    addRandomTile();\n    addRandomTile();\n    updateBoard();\n}\nfunction isWinner() {\n    return cells.some(function(cell) {\n        return cell.classList.contains(\"field-cell--\".concat(2048));\n    });\n}\nfunction handleKeyPress(event) {\n    if (isWinner()) {\n        messageWin.classList.remove(\"hidden\");\n        return;\n    }\n    if (!hasEmptyCells() && !canMerged()) {\n        messageLose.classList.remove(\"hidden\");\n        return;\n    }\n    switch(event.key){\n        case \"ArrowUp\":\n        case \"ArrowDown\":\n            moveVertical(event.key);\n            break;\n        case \"ArrowLeft\":\n        case \"ArrowRight\":\n            moveHorizontal(event.key);\n            break;\n        default:\n    }\n}\nfunction moveVertical(direction) {\n    var isColumnChanged = false;\n    for(var col = 0; col < BOARD_SIZE; col++){\n        var currentColumn = [\n            board[0][col],\n            board[1][col],\n            board[2][col],\n            board[3][col]\n        ];\n        var columnCopy = _to_consumable_array(currentColumn);\n        if (direction === \"ArrowDown\") currentColumn.reverse();\n        currentColumn = slideTiles(currentColumn);\n        if (direction === \"ArrowDown\") currentColumn.reverse();\n        for(var i = 0; i < BOARD_SIZE; i++)board[i][col] = currentColumn[i];\n        if (hasBoardChanged(columnCopy, currentColumn)) isColumnChanged = true;\n    }\n    if (isColumnChanged) {\n        addRandomTile();\n        updateBoard();\n    }\n}\nfunction moveHorizontal(direction) {\n    var isRowChanged = false;\n    for(var row = 0; row < BOARD_SIZE; row++){\n        var rowCopy = _to_consumable_array(board[row]);\n        var currentRow = board[row];\n        if (direction === \"ArrowRight\") currentRow.reverse();\n        currentRow = slideTiles(currentRow);\n        if (direction === \"ArrowRight\") currentRow.reverse();\n        board[row] = currentRow;\n        if (hasBoardChanged(rowCopy, currentRow)) isRowChanged = true;\n    }\n    if (isRowChanged) {\n        addRandomTile();\n        updateBoard();\n    }\n}\nfunction slideTiles(row) {\n    var filteredRow = removeZeroes(row);\n    for(var i = 0; i < filteredRow.length - 1; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n        filteredRow[i] *= 2;\n        filteredRow[i + 1] = 0;\n        score += filteredRow[i];\n    }\n    filteredRow = removeZeroes(filteredRow);\n    while(filteredRow.length < BOARD_SIZE)filteredRow.push(0);\n    return filteredRow;\n}\nfunction removeZeroes(row) {\n    return row.filter(function(number) {\n        return number !== 0;\n    });\n}\nfunction canMerged() {\n    for(var row = 0; row < BOARD_SIZE; row++)for(var col = 0; col < BOARD_SIZE; col++){\n        if (col < BOARD_SIZE - 1 && board[row][col] === board[row][col + 1]) return true;\n        if (row < BOARD_SIZE - 1 && board[row][col] === board[row + 1][col]) return true;\n    }\n    return false;\n}\nfunction hasEmptyCells() {\n    for(var row = 0; row < BOARD_SIZE; row++)for(var col = 0; col < BOARD_SIZE; col++){\n        if (board[row][col] === 0) return true;\n    }\n    return false;\n}\nfunction hasBoardChanged(arr1, arr2) {\n    return JSON.stringify(arr1) !== JSON.stringify(arr2);\n}\n\n//# sourceMappingURL=index.9d724f48.js.map\n","'use strict';\n\nconst cells = [...document.querySelectorAll('.field-cell')];\nconst startButton = document.querySelector('.button.start');\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst messages = document.querySelectorAll('.message');\nconst messageLose = document.querySelector('.message.message-lose');\nconst messageWin = document.querySelector('.message.message-win');\n\nconst BOARD_SIZE = 4;\nlet score = 0;\nconst board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nstartButton.addEventListener('click', startGame);\n\nlet keyTimer;\n\ndocument.addEventListener('keydown', (event) => {\n  clearTimeout(keyTimer);\n\n  keyTimer = setTimeout(() => {\n    handleKeyPress(event);\n  }, 100);\n});\n\nfunction addRandomTile() {\n  if (!hasEmptyCells() && !canMerged()) {\n    messageLose.classList.remove('hidden');\n\n    return;\n  }\n\n  const emptyCells = [];\n\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      if (board[i][j] === 0) {\n        emptyCells.push({\n          x: i,\n          y: j,\n        });\n      }\n    }\n  }\n\n  const randomNumber = Math.random() < 0.9 ? 2 : 4;\n\n  if (emptyCells.length) {\n    const randomCell\n      = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    board[randomCell.x][randomCell.y] = randomNumber;\n  }\n}\n\nfunction updateBoard() {\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      const cell = gameField.rows[row].cells[col];\n\n      cell.className = `field-cell field-cell--${board[row][col]}`;\n      cell.textContent = board[row][col] || '';\n    }\n  }\n}\n\nfunction startGame() {\n  if (startButton.classList.contains('start')) {\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart'; ;\n  }\n\n  [...messages].forEach(message => message.classList.add('hidden'));\n\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      board[i][j] = 0;\n    }\n  }\n\n  [...cells].forEach(cell => {\n    cell.className = 'field-cell';\n    cell.textContent = '';\n  });\n\n  score = 0;\n  gameScore.textContent = score;\n\n  addRandomTile();\n  addRandomTile();\n\n  updateBoard();\n}\n\nfunction isWinner() {\n  return cells.some(cell => cell.classList.contains(`field-cell--${2048}`));\n}\n\nfunction handleKeyPress(event) {\n  if (isWinner()) {\n    messageWin.classList.remove('hidden');\n\n    return;\n  }\n\n  if (!hasEmptyCells() && !canMerged()) {\n    messageLose.classList.remove('hidden');\n\n    return;\n  }\n\n  switch (event.key) {\n    case 'ArrowUp':\n    case 'ArrowDown':\n      moveVertical(event.key);\n      break;\n\n    case 'ArrowLeft':\n    case 'ArrowRight':\n      moveHorizontal(event.key);\n      break;\n\n    default:\n  }\n}\n\nfunction moveVertical(direction) {\n  let isColumnChanged = false;\n\n  for (let col = 0; col < BOARD_SIZE; col++) {\n    let currentColumn = [\n      board[0][col],\n      board[1][col],\n      board[2][col],\n      board[3][col],\n    ];\n\n    const columnCopy = [...currentColumn];\n\n    if (direction === 'ArrowDown') {\n      currentColumn.reverse();\n    }\n\n    currentColumn = slideTiles(currentColumn);\n\n    if (direction === 'ArrowDown') {\n      currentColumn.reverse();\n    }\n\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      board[i][col] = currentColumn[i];\n    }\n\n    if (hasBoardChanged(columnCopy, currentColumn)) {\n      isColumnChanged = true;\n    }\n  }\n\n  if (isColumnChanged) {\n    addRandomTile();\n    updateBoard();\n  }\n}\n\nfunction moveHorizontal(direction) {\n  let isRowChanged = false;\n\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const rowCopy = [...board[row]];\n    let currentRow = board[row];\n\n    if (direction === 'ArrowRight') {\n      currentRow.reverse();\n    }\n\n    currentRow = slideTiles(currentRow);\n\n    if (direction === 'ArrowRight') {\n      currentRow.reverse();\n    }\n\n    board[row] = currentRow;\n\n    if (hasBoardChanged(rowCopy, currentRow)) {\n      isRowChanged = true;\n    }\n  }\n\n  if (isRowChanged) {\n    addRandomTile();\n    updateBoard();\n  }\n}\n\nfunction slideTiles(row) {\n  let filteredRow = removeZeroes(row);\n\n  for (let i = 0; i < filteredRow.length - 1; i++) {\n    if (filteredRow[i] === filteredRow[i + 1]) {\n      filteredRow[i] *= 2;\n      filteredRow[i + 1] = 0;\n\n      score += filteredRow[i];\n    }\n  }\n\n  filteredRow = removeZeroes(filteredRow);\n\n  while (filteredRow.length < BOARD_SIZE) {\n    filteredRow.push(0);\n  }\n\n  return filteredRow;\n}\n\nfunction removeZeroes(row) {\n  return row.filter(number => number !== 0);\n}\n\nfunction canMerged() {\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      if (col < BOARD_SIZE - 1 && board[row][col] === board[row][col + 1]) {\n        return true;\n      }\n\n      if (row < BOARD_SIZE - 1 && board[row][col] === board[row + 1][col]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction hasEmptyCells() {\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      if (board[row][col] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction hasBoardChanged(arr1, arr2) {\n  return JSON.stringify(arr1) !== JSON.stringify(arr2);\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","keyTimer","cells","document","querySelectorAll","startButton","querySelector","gameField","gameScore","messages","messageLose","messageWin","score","board","addRandomTile","hasEmptyCells","canMerged","classList","remove","emptyCells","j","push","x","y","randomCell","Math","floor","random","updateBoard","row","col","cell","rows","className","concat","textContent","slideTiles","filteredRow","removeZeroes","filter","number","BOARD_SIZE","hasBoardChanged","arr1","JSON","stringify","addEventListener","contains","add","forEach","message","event","clearTimeout","setTimeout","handleKeyPress","some","key","moveVertical","direction","isColumnChanged","currentColumn","columnCopy","reverse","moveHorizontal","isRowChanged","rowCopy","currentRow"],"version":3,"file":"index.9d724f48.js.map"}